package com.turpgames.input;

import java.util.ArrayList;
import java.util.List;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.InputMultiplexer;
import com.badlogic.gdx.InputProcessor;
import com.badlogic.gdx.input.GestureDetector;
import com.badlogic.gdx.input.GestureDetector.GestureListener;
import com.badlogic.gdx.math.Vector2;

public class GdxInputManager {
	public final static GdxInputManager instance = new GdxInputManager();

	private final List<IInputProcessor> processors;
	private final InputMultiplexer multiplexer;

	private GdxInputManager() {
		processors = new ArrayList<IInputProcessor>();

		multiplexer = new InputMultiplexer();
		multiplexer.addProcessor(new GdxInputProcessor());
		multiplexer.addProcessor(new GestureDetector(new GdxGestureListener()));
	}

	public void activate() {
		Gdx.input.setInputProcessor(multiplexer);
	}

	public void deactivate() {
		Gdx.input.setInputProcessor(null);
	}

	public void addProcessor(IInputProcessor processor) {
		processors.add(processor);
	}

	public void removeProcessor(IInputProcessor processor) {
		processors.remove(processor);
	}

	public void reset() {
		InputCommand.resetAll();
	}

	public void notifyProcessors() {
		for (IInputProcessor processor : processors)
			processor.processInput();
	}

	private class GdxGestureListener implements GestureListener {
		@Override
		public boolean touchDown(float x, float y, int pointer, int button) {
			return false;
		}

		@Override
		public boolean tap(float x, float y, int count, int button) {
			InputCommand.tapCommand.set(x, Gdx.graphics.getHeight() - y, count);
			return false;
		}

		@Override
		public boolean longPress(float x, float y) {
			InputCommand.longPressCommand.set(x, Gdx.graphics.getHeight() - y);
			return false;
		}

		@Override
		public boolean fling(float velocityX, float velocityY, int button) {
			return false;
		}

		@Override
		public boolean pan(float x, float y, float deltaX, float deltaY) {
			return false;
		}

		@Override
		public boolean panStop(float x, float y, int pointer, int button) {
			return false;
		}

		@Override
		public boolean zoom(float initialDistance, float distance) {
			return false;
		}

		@Override
		public boolean pinch(Vector2 initialPointer1, Vector2 initialPointer2,
				Vector2 pointer1, Vector2 pointer2) {
			return false;
		}
	}

	private class GdxInputProcessor implements InputProcessor {
		@Override
		public boolean keyDown(int keycode) {
			InputCommand.keyDownCommand.set(keycode);
			return false;
		}

		@Override
		public boolean keyUp(int keycode) {
			InputCommand.keyUpCommand.set(keycode);
			return false;
		}

		@Override
		public boolean keyTyped(char character) {
			return false;
		}

		@Override
		public boolean touchDown(int screenX, int screenY, int pointer,
				int button) {
			InputCommand.touchDownCommand.set(screenX, Gdx.graphics.getHeight()
					- screenY, pointer);
			return false;
		}

		@Override
		public boolean touchUp(int screenX, int screenY, int pointer, int button) {
			InputCommand.touchUpCommand.set(screenX, Gdx.graphics.getHeight()
					- screenY, pointer);
			return false;
		}

		@Override
		public boolean touchDragged(int screenX, int screenY, int pointer) {
			InputCommand.touchDraggedCommand.set(screenX,
					Gdx.graphics.getHeight() - screenY, pointer);
			return false;
		}

		@Override
		public boolean mouseMoved(int screenX, int screenY) {
			return false;
		}

		@Override
		public boolean scrolled(int amount) {
			return false;
		}
	}
}
