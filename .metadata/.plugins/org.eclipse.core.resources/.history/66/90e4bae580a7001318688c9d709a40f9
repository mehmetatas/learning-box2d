package com.turpgames.physics.body.builders;

import com.badlogic.gdx.physics.box2d.Body;
import com.badlogic.gdx.physics.box2d.BodyDef;
import com.badlogic.gdx.physics.box2d.BodyDef.BodyType;
import com.badlogic.gdx.physics.box2d.World;

public class BodyBuilder {
	private final static BodyBuilder instance = new BodyBuilder();
	
	private final BodyDef bodyDef;
	
	private BodyBuilder() {
		bodyDef = new BodyDef();
	}
	
	private void reset() {
		// SEE: com.badlogic.gdx.physics.box2d.Body
		bodyDef.active = true;
		bodyDef.allowSleep = true;
		bodyDef.awake = true;
		bodyDef.bullet = false;
		bodyDef.fixedRotation = false;
		bodyDef.angle = 0;
		bodyDef.angularDamping = 0;
		bodyDef.angularVelocity = 0;
		bodyDef.gravityScale = 1;
		bodyDef.linearDamping = 0;
		bodyDef.linearVelocity.set(0,0);
		bodyDef.position.set(0,0);
		bodyDef.type = BodyType.StaticBody;
	}
	
	public BodyBuilder center(float centerX, float centerY) {
		bodyDef.position.set(centerX, centerY);
		return this;
	}
	
	public BodyBuilder angle(float angle) {
		bodyDef.angle = angle;
		return this;
	}
	
	public BodyBuilder linearVelocity(float vx, float vy) {
		bodyDef.linearVelocity.set(vx, vy);
		return this;
	}
	
	public BodyBuilder angularVelocity(float angularVelocity) {
		bodyDef.angularVelocity = angularVelocity;
		return this;
	}
	
	public BodyBuilder linearDamping(float linearDamping) {
		bodyDef.linearDamping = linearDamping;
		return this;
	}
	
	public BodyBuilder angularDamping(float angularDamping) {
		bodyDef.angularDamping = angularDamping;
		return this;
	}
	
	public BodyBuilder neverSleep() {
		bodyDef.allowSleep = false;
		return this;
	}
	
	public BodyBuilder sleeping() {
		bodyDef.awake = false;
		return this;
	}
	
	public BodyBuilder fixedRotation() {
		bodyDef.fixedRotation = true;
		return this;
	}
	
	public BodyBuilder bullet() {
		bodyDef.bullet = true;
		return this;
	}
	
	public BodyBuilder deactive() {
		bodyDef.active = false;
		return this;
	}
	
	public BodyBuilder gravityScale(float gravityScale) {
		bodyDef.gravityScale = gravityScale;
		return this;
	}
	
	public Body build(World world) {
		return world.createBody(bodyDef);
	}
	
	public static BodyBuilder newStaticBody() {
		return newBody(BodyType.StaticBody);
	}
	
	public static BodyBuilder newDynamicBody() {
		return newBody(BodyType.DynamicBody);
	}
	
	public static BodyBuilder newKinematicBody() {
		return newBody(BodyType.KinematicBody);
	}
	
	private static BodyBuilder newBody(BodyType type) {
		instance.reset();
		instance.bodyDef.type = type;
		return instance;
	}
}
